===========================
How to Use 0-add_integer.py
===========================

The module defines an integer addition function ``add_integer(a, b=98)`` that returns the sum of its two arguments. 
2nd argument is optional and both args must be either ints or floats. NaN float types, however, throw an error.

Usage
=====

Import module:
::

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:
Works for one valid argument and two valid arguments
::

    >>> add_integer(7)
    105

    >>> add_integer(-7.1, 7)
    0

More than 2 arguments
::

    >>> add_integer(1, 5, 7)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Arg1 or Arg2 not int or float
::

    >>> add_integer("Evans")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(4, "Name")
    Traceback (most recent call last):
    TypeError: b must be an integer

NaN float type as an argument
::

    >>> add_integer(4.5, float('Nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

Float Overflow
::

    >>> add_integer(4, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
